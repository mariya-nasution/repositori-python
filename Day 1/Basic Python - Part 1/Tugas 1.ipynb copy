{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Soal No 1\n",
    "\n",
    "Misalkan $x_{1}, x_{2} \\in \\mathbb{R}$ adalah dua buah titik pada ruang berdimensi $n$, maka jarak Euclidean antara kedua titik tersebut pada koordinat kartesius adalah sebagai berikut:\n",
    "\n",
    "$$d(x_{1}, x_{2}) = \\sqrt{(x_{11}-x_{21})^{2} + (x_{12}-x_{22})^2 + ... + (x_{1n} - x_{2n})^{2}}$$\n",
    "\n",
    "Buatlah sebuah fungsi yang bisa menghitung jarak dari dua buah titik tersebut dengan input sebagai list dan berlaku untuk dimensi apapun.\n",
    "\n",
    "Contoh:\n",
    "\n",
    "```python\n",
    "jarak_euclidean(x1=[1,2,3],x2=[3,2,1])\n",
    "\n",
    "# output: 2.8284271247461903\n",
    "\n",
    "jarak_euclidean(x1=[1,2,3,4],x2=[4,3,2,1])\n",
    "\n",
    "# output: 4.47213595499958\n",
    "\n",
    "jarak_euclidean(x1=[1,2,3,4],x2=[4,3,2])\n",
    "\n",
    "# output: \"error, panjang vektor tidak sama\"\n",
    "\n",
    "```\n",
    "\n",
    "Catatan: Tidak boleh menggunakan package atau module apapun, hanya menggunakan plain Python.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Jawaban Soal 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def jarak_euclidean(x1=[], x2=[]):\n",
    "    if len(x1) != len(x2):\n",
    "        print(\"error, panjang vektor tidak sama\")\n",
    "        return\n",
    "    d2 = 0.0\n",
    "    for i in range(len(x1)):\n",
    "        d2 = d2 + (x1[i] - x2[i])**2\n",
    "    return d2**0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.8284271247461903"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jarak_euclidean(x1=[1,2,3],x2=[3,2,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.47213595499958"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jarak_euclidean(x1=[1,2,3,4],x2=[4,3,2,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error, panjang vektor tidak sama\n"
     ]
    }
   ],
   "source": [
    "jarak_euclidean(x1=[1,2,3,4],x2=[4,3,2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Soal No 2\n",
    "\n",
    "Misalkan diberikan dua buah field data yaitu ```tinggi_badan``` dan ```berat_badan```. Kita ingin menghitung korelasi antara kedua field ini dengan menggunakan korelasi pearson, dimana:\n",
    "\n",
    "$$r_{xy} = \\frac{\\Sigma^{n}_{i=1}(x_{i}-\\bar{x})(y_{i}-\\bar{y})}{\\sqrt{\\Sigma^{n}_{i=1}(x_{i}-\\bar{x})^{2}}\\sqrt{\\Sigma^{n}_{i=1}(y_{i}-\\bar{y})^{2}}}$$\n",
    "\n",
    "dengan:\n",
    "\n",
    "- $n$ adalah ukuran sampel\n",
    "- $x_{i}, y_{i}$ adalah titik sampel untuk $x$ dan $y$\n",
    "- $\\bar{x}, \\bar{y}$ adalah rerata dari $x$ dan $y$\n",
    "\n",
    "Buatlah sebuah fungsi yang dapat menerima input berupa list data sehingga diperoleh nilai korelasi pearson.\n",
    "\n",
    "Contoh:\n",
    "\n",
    "```python\n",
    "tinggi_badan = [150,145,175,165]\n",
    "berat_badan = [60,75,80,80]\n",
    "korelasi_pearson(x=tinggi_badan, y=berat_badan)\n",
    "\n",
    "# output: 0.6234616\n",
    "```\n",
    "\n",
    "Note: Hanya boleh menggunakan [built-in module Python](https://docs.python.org/3/library/index.html)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Jawaban Soal No 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def korelasi_pearson(x=[], y=[]):\n",
    "    N = len(x)\n",
    "    if N != len(y):\n",
    "        print(\"error, panjang vektor tidak sama\")\n",
    "        return\n",
    "    # Hitung rata2\n",
    "    sx = 0.0\n",
    "    sy = 0.0\n",
    "    for i in range(N):\n",
    "        sx = sx + x[i]\n",
    "        sy = sy + y[i]\n",
    "    xbar = sx/N\n",
    "    ybar = sy/N\n",
    "    #\n",
    "    A = 0.0\n",
    "    B1 = 0.0\n",
    "    B2 = 0.0\n",
    "    for i in range(N):\n",
    "        dx = x[i] - xbar\n",
    "        dy = y[i] - ybar\n",
    "        A = A + dx*dy\n",
    "        B1 = B1 + dx**2\n",
    "        B2 = B2 + dy**2\n",
    "    rxy = A/(B1**0.5 * B2**0.5)\n",
    "    return rxy\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6234615617156178"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tinggi_badan = [150,145,175,165]\n",
    "berat_badan = [60,75,80,80]\n",
    "korelasi_pearson(x=tinggi_badan, y=berat_badan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statistics import mean\n",
    "from math import sqrt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def korelasi_pearson(x=[], y=[]):\n",
    "    N = len(x)\n",
    "    if N != len(y):\n",
    "        print(\"error, panjang vektor tidak sama\")\n",
    "        return\n",
    "    \n",
    "    #hitung rata-rata\n",
    "    xbar = mean(x)\n",
    "    ybar = mean(y)\n",
    "    #\n",
    "    A = 0.0\n",
    "    B1 = 0.0\n",
    "    B2 = 0.0\n",
    "    for i in range(N):\n",
    "        dx = x[i] - mean(x)\n",
    "        dy = y[i] - mean(y)\n",
    "        A = A + dx*dy\n",
    "        B1 = B1 + dx**2\n",
    "        B2 = B2 + dy**2\n",
    "    rxy = A/(sqrt(B1) * sqrt(B2))\n",
    "    return rxy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6234615617156178"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tinggi_badan = [150,145,175,165]\n",
    "berat_badan = [60,75,80,80]\n",
    "korelasi_pearson(x=tinggi_badan, y=berat_badan)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
